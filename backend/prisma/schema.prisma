// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  imageUrl    String?
  createdAt   DateTime      @default(now())
  participant Participant[]
  Messages    Messages[]
  Chat        Chat[]
}

model Chat {
  id                     String        @id @default(uuid())
  isGroupChat            Boolean
  name                   String?
  adminId                String?
  admin                  User?         @relation(fields: [adminId], references: [id])
  latestMessage          String
  latestMessageCreatedAt DateTime      @default(now())
  messages               Messages[]
  participants           Participant[]
}

//for the unseen notification feature
model Participant {
  id          String   @id @default(uuid())
  lastSeenAt  DateTime
  unseenCount Int      @default(0)
  chatId      String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat        Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

enum MessageType {
  TEXT
  MEDIA
  CALL
}

model Messages {
  id        String      @id @default(uuid())
  content   String?
  authorId  String
  mediaUrl  String?
  callUrl   String?
  author    User        @relation(fields: [authorId], references: [id])
  type      MessageType
  createdAt DateTime    @default(now())
  chatId    String?
  chat      Chat?       @relation(fields: [chatId], references: [id], onDelete: Cascade)
}
